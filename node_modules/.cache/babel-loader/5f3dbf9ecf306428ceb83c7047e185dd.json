{"ast":null,"code":"var _jsxFileName = \"/home/kihwan/Desktop/nomadCoder/nomflix/src/Routes/Detail/DetailContainer.js\";\nimport React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { moviesApi, tvApi } from \"../../api\";\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      location: {\n        pathname\n      }\n    } = props;\n    this.state = {\n      result: null,\n      error: null,\n      loading: true,\n      isMovie: pathname.includes(\"/movie/\")\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match: {\n        params: {\n          id\n        }\n      },\n      history: {\n        push\n      }\n    } = this.props;\n    const {\n      isMovie\n    } = this.state;\n    const parseId = parseInt(id);\n\n    if (isNaN(parseId)) {\n      return push(\"/\");\n    }\n\n    let result = \"\";\n\n    try {\n      if (isMovie) {\n        const {\n          data\n        } = await moviesApi.movieDetail(parseId);\n      } else {\n        const {\n          data\n        } = await tvApi.showDetail(parseId);\n      }\n    } catch {\n      this.setState({\n        error: \"Can't find anything.\"\n      });\n    } finally {\n      this.setState({\n        loading: false,\n        result\n      });\n    }\n  }\n\n  render() {\n    const {\n      result,\n      error,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(DetailPresenter, {\n      result: result,\n      error: error,\n      loading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/kihwan/Desktop/nomadCoder/nomflix/src/Routes/Detail/DetailContainer.js"],"names":["React","DetailPresenter","moviesApi","tvApi","Component","constructor","props","location","pathname","state","result","error","loading","isMovie","includes","componentDidMount","match","params","id","history","push","parseId","parseInt","isNaN","data","movieDetail","showDetail","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,WAAjC;AAEA,eAAe,cAAcH,KAAK,CAACI,SAApB,CAA8B;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,UAAM;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA;AAAF;AAAZ,QAA4BF,KAAlC;AACA,SAAKG,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,IADC;AAETC,MAAAA,KAAK,EAAE,IAFE;AAGTC,MAAAA,OAAO,EAAE,IAHA;AAITC,MAAAA,OAAO,EAAEL,QAAQ,CAACM,QAAT,CAAkB,SAAlB;AAJA,KAAb;AAMH;;AAED,QAAMC,iBAAN,GAA0B;AACtB,UAAM;AACFC,MAAAA,KAAK,EAAG;AAAEC,QAAAA,MAAM,EAAG;AAAEC,UAAAA;AAAF;AAAX,OADN;AAEFC,MAAAA,OAAO,EAAE;AAAEC,QAAAA;AAAF;AAFP,QAGF,KAAKd,KAHT;AAKA,UAAM;AAAEO,MAAAA;AAAF,QAAc,KAAKJ,KAAzB;AACA,UAAMY,OAAO,GAAGC,QAAQ,CAACJ,EAAD,CAAxB;;AACA,QAAGK,KAAK,CAACF,OAAD,CAAR,EAAkB;AACd,aAAOD,IAAI,CAAC,GAAD,CAAX;AACH;;AAED,QAAIV,MAAM,GAAG,EAAb;;AACA,QAAI;AACA,UAAGG,OAAH,EAAW;AACP,cAAM;AAAEW,UAAAA;AAAF,YAAW,MAAMtB,SAAS,CAACuB,WAAV,CAAsBJ,OAAtB,CAAvB;AACH,OAFD,MAEO;AACH,cAAM;AAAEG,UAAAA;AAAF,YAAW,MAAMrB,KAAK,CAACuB,UAAN,CAAiBL,OAAjB,CAAvB;AACH;AAEJ,KAPD,CAOE,MAAM;AACJ,WAAKM,QAAL,CAAc;AAAChB,QAAAA,KAAK,EAAG;AAAT,OAAd;AACH,KATD,SASU;AACN,WAAKgB,QAAL,CAAc;AAAEf,QAAAA,OAAO,EAAC,KAAV;AAAiBF,QAAAA;AAAjB,OAAd;AACH;AACJ;;AAEDkB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAElB,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,QAA6B,KAAKH,KAAxC;AACA,wBACI,oBAAC,eAAD;AACI,MAAA,MAAM,EAAEC,MADZ;AAEI,MAAA,KAAK,EAAEC,KAFX;AAGI,MAAA,OAAO,EAAEC,OAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AAjDwC","sourcesContent":["import React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { moviesApi, tvApi } from \"../../api\";\n\nexport default class extends React.Component {\n    constructor(props) {\n        super(props);\n            \n        const { location: { pathname }} = props;\n        this.state = {\n            result: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes(\"/movie/\")\n        };\n    }\n\n    async componentDidMount() {\n        const { \n            match : { params : { id }},\n            history: { push },\n        } = this.props;\n\n        const { isMovie } = this.state;\n        const parseId = parseInt(id);\n        if(isNaN(parseId)){\n            return push(\"/\");\n        }\n\n        let result = \"\";\n        try {\n            if(isMovie){\n                const { data } = await moviesApi.movieDetail(parseId);\n            } else {\n                const { data } = await tvApi.showDetail(parseId);\n            }\n            \n        } catch {\n            this.setState({error : \"Can't find anything.\"});\n        } finally {\n            this.setState({ loading:false, result });\n        }\n    }\n    \n    render() {\n        const { result, error, loading } = this.state;\n        return (\n            <DetailPresenter \n                result={result} \n                error={error}\n                loading={loading}\n            />\n        )\n    };\n}"]},"metadata":{},"sourceType":"module"}